
[
  {
    "type": "globalCss",
    "fileName": "index.css",
    "dir": "src",
    "value": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Define custom font families based on guidelines */\n@layer base {\n  :root {\n    /* Custom color variables for EduBridge */\n    --color-primary-green: #16a34a;\n    --color-accent-yellow: #fbbf24;\n    --color-background-light-gray: #f9fafb;\n\n    /* Shadcn UI colors adjustments */\n    --background: var(--color-background-light-gray);\n    --foreground: 222.2 47.4% 11.2%; /* Dark text */\n    --primary: var(--color-primary-green);\n    --primary-foreground: 210 40% 98%; /* White text for primary buttons */\n    --accent: var(--color-accent-yellow);\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    /* Other shadcn variables, adjusted for lighter theme */\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n  }\n\n  body {\n    @apply font-roboto bg-gray-50 text-gray-900;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-inter;\n  }\n\n  /* Assuming Inter and Roboto are imported via link tags in index.html or similar */\n  /* e.g., <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Roboto:wght@400;500;700&display=swap\" rel=\"stylesheet\"> */\n}\n\n/* Custom styles for interactive elements */\n.course-card-link {\n  @apply transition-transform duration-200 ease-in-out hover:scale-[1.02] hover:shadow-lg;\n}\n"
  },
  {
    "type": "component",
    "fileName": "App.tsx",
    "dir": "src",
    "value": "import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Layout from './components/Layout';\nimport Dashboard from './pages/Dashboard';\nimport CourseCatalog from './pages/CourseCatalog';\nimport CourseDetails from './pages/CourseDetails';\nimport Profile from './pages/Profile';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Dashboard />} />\n          <Route path=\"courses\" element={<CourseCatalog />} />\n          <Route path=\"courses/:id\" element={<CourseDetails />} />\n          <Route path=\"profile\" element={<Profile />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"
  },
  {
    "type": "component",
    "fileName": "Layout.tsx",
    "dir": "src/components",
    "value": "import React from 'react';\nimport { Outlet, NavLink } from 'react-router-dom';\nimport { Home, BookOpen, GraduationCap, User, Settings, Search } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\n\nconst Layout: React.FC = () => {\n  const navItems = [\n    { name: 'Dashboard', path: '/', icon: Home },\n    { name: 'Course Catalog', path: '/courses', icon: BookOpen },\n    { name: 'My Profile', path: '/profile', icon: User }\n  ];\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      {/* Sidebar */}\n      <aside className=\"w-64 bg-white border-r border-gray-200 p-6 flex flex-col shadow-lg\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-inter font-bold text-green-700\">EduBridge</h1>\n          <p className=\"text-sm text-gray-500\">Learning Platform</p>\n        </div>\n        <nav className=\"flex-1\">\n          <ul className=\"space-y-2\">\n            {navItems.map((item) => (\n              <li key={item.name}>\n                <NavLink\n                  to={item.path}\n                  className={({ isActive }) =>\n                    `flex items-center space-x-3 p-3 rounded-lg transition-colors duration-200 ` +\n                    (isActive ? 'bg-green-50 text-green-700 font-semibold' : 'text-gray-600 hover:bg-gray-100 hover:text-green-600')\n                  }\n                >\n                  <item.icon className=\"w-5 h-5\" />\n                  <span>{item.name}</span>\n                </NavLink>\n              </li>\n            ))}\n          </ul>\n        </nav>\n        <div className=\"mt-auto\">\n          <Separator className=\"my-4\" />\n          <Button variant=\"outline\" className=\"w-full flex items-center justify-center space-x-2 text-gray-600 hover:text-green-600\">\n            <Settings className=\"w-4 h-4\" />\n            <span>Settings</span>\n          </Button>\n        </div>\n      </aside>\n\n      {/* Main Content Area */}\n      <main className=\"flex-1 p-8 overflow-auto\">\n        <Outlet />\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n"
  },
  {
    "type": "page",
    "fileName": "Dashboard.tsx",
    "dir": "src/pages",
    "value": "import React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Link } from 'react-router-dom';\nimport { BookOpen, Award, Clock } from 'lucide-react';\n\ninterface CourseProgress {\n  id: string;\n  title: string;\n  instructor: string;\n  progress: number;\n  nextLesson: string;\n}\n\nconst dummyCourses: CourseProgress[] = [\n  {\n    id: 'intro-react',\n    title: 'Introduction to React.js',\n    instructor: 'Jane Doe',\n    progress: 75,\n    nextLesson: 'Handling State with Hooks'\n  },\n  {\n    id: 'advanced-tailwind',\n    title: 'Advanced Tailwind CSS Techniques',\n    instructor: 'John Smith',\n    progress: 40,\n    nextLesson: 'Customizing Tailwind with Plugins'\n  },\n  {\n    id: 'web-security',\n    title: 'Web Security Fundamentals',\n    instructor: 'Alice Brown',\n    progress: 10,\n    nextLesson: 'Introduction to OWASP Top 10'\n  }\n];\n\nconst Dashboard: React.FC = () => {\n  return (\n    <div className=\"space-y-8\">\n      <h1 className=\"text-4xl font-inter font-bold text-gray-900\">Welcome Back!</h1>\n      <p className=\"text-lg text-gray-600\">Continue your learning journey and explore new courses.</p>\n\n      <section>\n        <h2 className=\"text-2xl font-inter font-semibold text-gray-800 mb-4\">My Courses</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {dummyCourses.map((course) => (\n            <Card key={course.id} className=\"shadow-sm course-card-link\">\n              <Link to={`/courses/${course.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-inter text-green-700\">{course.title}</CardTitle>\n                  <CardDescription className=\"text-gray-500\">{course.instructor}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-600\">\n                      <span>Progress:</span>\n                      <span>{course.progress}%</span>\n                    </div>\n                    <Progress value={course.progress} className=\"w-full [&::-webkit-progress-value]:bg-green-600 [&::-moz-progress-bar]:bg-green-600 [&[data-state=complete]]:bg-green-600\" />\n                    <p className=\"text-sm text-gray-500 mt-2 flex items-center\">\n                      <Clock className=\"w-4 h-4 mr-1\" /> Next: {course.nextLesson}\n                    </p>\n                  </div>\n                </CardContent>\n              </Link>\n            </Card>\n          ))}\n          <Card className=\"shadow-sm flex flex-col items-center justify-center p-6 text-center border-2 border-dashed border-gray-300 bg-gray-50\">\n            <BookOpen className=\"w-10 h-10 text-gray-400 mb-3\" />\n            <CardTitle className=\"text-lg font-inter text-gray-700\">Explore More Courses</CardTitle>\n            <CardDescription className=\"text-gray-500 mb-4\">Discover new topics and expand your knowledge.</CardDescription>\n            <Button asChild className=\"bg-yellow-500 hover:bg-yellow-600 text-white\">\n              <Link to=\"/courses\">Browse Catalog</Link>\n            </Button>\n          </Card>\n        </div>\n      </section>\n\n      <section>\n        <h2 className=\"text-2xl font-inter font-semibold text-gray-800 mb-4\">Achievements</h2>\n        <Card className=\"shadow-sm p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Award className=\"w-12 h-12 text-yellow-500\" />\n            <div>\n              <h3 className=\"text-xl font-inter font-semibold\">No new achievements yet!</h3>\n              <p className=\"text-gray-600\">Keep learning to earn badges and certificates.</p>\n            </div>\n          </div>\n        </Card>\n      </section>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"
  },
  {
    "type": "page",
    "fileName": "CourseCatalog.tsx",
    "dir": "src/pages",
    "value": "import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Link } from 'react-router-dom';\nimport { Search, BookOpen, Star, Users } from 'lucide-react';\n\ninterface Course {\n  id: string;\n  title: string;\n  instructor: string;\n  description: string;\n  category: string;\n  rating: number;\n  students: number;\n}\n\nconst allCourses: Course[] = [\n  {\n    id: 'intro-react',\n    title: 'Introduction to React.js',\n    instructor: 'Jane Doe',\n    description: 'Learn the fundamentals of React, from components to hooks.',\n    category: 'Web Development',\n    rating: 4.7,\n    students: 1250\n  },\n  {\n    id: 'advanced-tailwind',\n    title: 'Advanced Tailwind CSS Techniques',\n    instructor: 'John Smith',\n    description: 'Master responsive design and custom utilities with Tailwind.',\n    category: 'Design',\n    rating: 4.5,\n    students: 890\n  },\n  {\n    id: 'data-science-python',\n    title: 'Data Science with Python',\n    instructor: 'Emily White',\n    description: 'Explore data analysis, visualization, and machine learning with Python.',\n    category: 'Data Science',\n    rating: 4.8,\n    students: 2100\n  },\n  {\n    id: 'web-security',\n    title: 'Web Security Fundamentals',\n    instructor: 'Alice Brown',\n    description: 'Understand common web vulnerabilities and how to protect your applications.',\n    category: 'Cybersecurity',\n    rating: 4.3,\n    students: 520\n  },\n  {\n    id: 'ux-design-principles',\n    title: 'UX Design Principles for Beginners',\n    instructor: 'Chris Green',\n    description: 'Learn the core principles of user experience design.',\n    category: 'Design',\n    rating: 4.6,\n    students: 750\n  },\n  {\n    id: 'javascript-deep-dive',\n    title: 'JavaScript: The Hard Parts',\n    instructor: 'Sarah Lee',\n    description: 'Dive deep into JavaScript concepts like closures, scope, and prototypes.',\n    category: 'Web Development',\n    rating: 4.9,\n    students: 1500\n  }\n];\n\nconst CourseCatalog: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n\n  const categories = ['All', ...new Set(allCourses.map(course => course.category))];\n\n  const filteredCourses = allCourses.filter(course => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          course.instructor.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'All' || course.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  return (\n    <div className=\"space-y-8\">\n      <h1 className=\"text-4xl font-inter font-bold text-gray-900\">Course Catalog</h1>\n      <p className=\"text-lg text-gray-600\">Browse our extensive collection of courses and find your next learning adventure.</p>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-500\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search courses by title or instructor...\"\n            className=\"pl-9 pr-4 py-2\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        <Select onValueChange={setSelectedCategory} value={selectedCategory}>\n          <SelectTrigger className=\"w-full sm:w-[180px]\">\n            <SelectValue placeholder=\"Filter by Category\" />\n          </SelectTrigger>\n          <SelectContent>\n            {categories.map(category => (\n              <SelectItem key={category} value={category}>{category}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredCourses.length > 0 ? (\n          filteredCourses.map((course) => (\n            <Card key={course.id} className=\"shadow-sm course-card-link\">\n              <Link to={`/courses/${course.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-inter text-green-700\">{course.title}</CardTitle>\n                  <CardDescription className=\"text-gray-500\">{course.instructor} • {course.category}</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <p className=\"text-sm text-gray-700 line-clamp-2\">{course.description}</p>\n                  <div className=\"flex items-center text-sm text-gray-600 space-x-3 mt-2\">\n                    <span className=\"flex items-center\"><Star className=\"w-4 h-4 mr-1 text-yellow-500 fill-yellow-500\" /> {course.rating}</span>\n                    <span className=\"flex items-center\"><Users className=\"w-4 h-4 mr-1\" /> {course.students} students</span>\n                  </div>\n                </CardContent>\n              </Link>\n            </Card>\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-10 text-gray-500\">\n            <BookOpen className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n            <p className=\"text-lg\">No courses found matching your criteria.</p>\n            <Button variant=\"link\" onClick={() => { setSearchTerm(''); setSelectedCategory('All'); }} className=\"mt-4\">Clear Filters</Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CourseCatalog;\n"
  },
  {
    "type": "page",
    "fileName": "CourseDetails.tsx",
    "dir": "src/pages",
    "value": "import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { ChevronLeft, PlayCircle, Clock, BookOpen, CheckCircle } from 'lucide-react';\n\ninterface Lesson {\n  id: string;\n  title: string;\n  duration: string;\n  completed: boolean;\n}\n\ninterface FullCourseDetails {\n  id: string;\n  title: string;\n  instructor: string;\n  description: string;\n  category: string;\n  rating: number;\n  students: number;\n  totalLessons: number;\n  completedLessons: number;\n  lessons: Lesson[];\n}\n\nconst dummyFullCourseDetails: { [key: string]: FullCourseDetails } = {\n  'intro-react': {\n    id: 'intro-react',\n    title: 'Introduction to React.js',\n    instructor: 'Jane Doe',\n    description: 'This comprehensive course covers everything you need to know to get started with React.js, from setting up your development environment to building complex UIs with state and props.',\n    category: 'Web Development',\n    rating: 4.7,\n    students: 1250,\n    totalLessons: 10,\n    completedLessons: 6,\n    lessons: [\n      { id: '1', title: 'What is React?', duration: '15 min', completed: true },\n      { id: '2', title: 'Setting Up Your Environment', duration: '20 min', completed: true },\n      { id: '3', title: 'Components and JSX', duration: '25 min', completed: true },\n      { id: '4', title: 'Props and Component Communication', duration: '30 min', completed: true },\n      { id: '5', title: 'Handling State with Hooks', duration: '45 min', completed: true },\n      { id: '6', title: 'Conditional Rendering & Lists', duration: '35 min', completed: true },\n      { id: '7', title: 'Forms and Controlled Components', duration: '40 min', completed: false },\n      { id: '8', title: 'React Router for Navigation', duration: '50 min', completed: false },\n      { id: '9', title: 'Fetching Data with Effects', duration: '60 min', completed: false },\n      { id: '10', title: 'Deployment and Best Practices', duration: '30 min', completed: false }\n    ]\n  },\n  'advanced-tailwind': {\n    id: 'advanced-tailwind',\n    title: 'Advanced Tailwind CSS Techniques',\n    instructor: 'John Smith',\n    description: 'Go beyond the basics and master advanced Tailwind CSS features. Learn about custom configurations, plugins, and optimizing your CSS for production.',\n    category: 'Design',\n    rating: 4.5,\n    students: 890,\n    totalLessons: 8,\n    completedLessons: 3,\n    lessons: [\n      { id: '1', title: 'Deep Dive into Tailwind Config', duration: '20 min', completed: true },\n      { id: '2', title: 'Creating Custom Components', duration: '30 min', completed: true },\n      { id: '3', title: 'Responsive Design Strategies', duration: '40 min', completed: true },\n      { id: '4', title: 'Animation and Transitions', duration: '35 min', completed: false },\n      { id: '5', title: 'Optimizing for Production', duration: '25 min', completed: false },\n      { id: '6', title: 'Working with Plugins', duration: '45 min', completed: false },\n      { id: '7', title: 'Building Complex Layouts', duration: '50 min', completed: false },\n      { id: '8', title: 'Integrating with React/Vue', duration: '30 min', completed: false }\n    ]\n  }\n  // ... more dummy data\n};\n\nconst CourseDetails: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const course = id ? dummyFullCourseDetails[id] : undefined;\n\n  if (!course) {\n    return (\n      <div className=\"text-center py-10\">\n        <h1 className=\"text-3xl font-inter font-bold text-gray-900\">Course Not Found</h1>\n        <p className=\"text-lg text-gray-600\">The course you are looking for does not exist.</p>\n        <Button asChild className=\"mt-6 bg-green-600 hover:bg-green-700\">\n          <Link to=\"/courses\">Back to Course Catalog</Link>\n        </Button>\n      </div>\n    );\n  }\n\n  const completionPercentage = (course.completedLessons / course.totalLessons) * 100;\n\n  return (\n    <div className=\"space-y-8\">\n      <Button variant=\"ghost\" asChild className=\"mb-4 text-green-700 hover:text-green-800\">\n        <Link to=\"/courses\">\n          <ChevronLeft className=\"w-5 h-5 mr-2\" /> Back to Catalog\n        </Link>\n      </Button>\n\n      <Card className=\"shadow-md p-6\">\n        <CardHeader className=\"px-0 pt-0\">\n          <CardTitle className=\"text-4xl font-inter font-bold text-green-800\">{course.title}</CardTitle>\n          <CardDescription className=\"text-lg text-gray-600\">By {course.instructor} • {course.category}</CardDescription>\n          <div className=\"flex items-center text-gray-600 mt-2 space-x-4\">\n            <span className=\"flex items-center text-sm\"><BookOpen className=\"w-4 h-4 mr-1\" /> {course.totalLessons} Lessons</span>\n            <span className=\"flex items-center text-sm\"><Clock className=\"w-4 h-4 mr-1\" /> ~{Math.round(course.totalLessons * 30 / 60)} hours</span>\n            <span className=\"flex items-center text-sm\"><PlayCircle className=\"w-4 h-4 mr-1\" /> {course.students} students enrolled</span>\n          </div>\n        </CardHeader>\n        <CardContent className=\"px-0 pb-0 space-y-6\">\n          <p className=\"text-gray-700 leading-relaxed\">{course.description}</p>\n\n          <div className=\"space-y-2 mt-4\">\n            <div className=\"flex justify-between text-base text-gray-700\">\n              <span>Your Progress:</span>\n              <span>{course.completedLessons} / {course.totalLessons} Lessons ({completionPercentage.toFixed(0)}%)</span>\n            </div>\n            <Progress value={completionPercentage} className=\"w-full [&::-webkit-progress-value]:bg-green-600 [&::-moz-progress-bar]:bg-green-600 [&[data-state=complete]]:bg-green-600\" />\n          </div>\n\n          <h2 className=\"text-2xl font-inter font-semibold text-gray-800 mt-8 mb-4\">Course Content</h2>\n          <div className=\"space-y-3\">\n            {course.lessons.map((lesson, index) => (\n              <div\n                key={lesson.id}\n                className={`flex items-center justify-between p-4 rounded-lg border \n                ${lesson.completed ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}\n                ${!lesson.completed && index === course.completedLessons ? 'border-yellow-400 ring-2 ring-yellow-200' : ''}\n                `}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  {lesson.completed ? (\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  ) : (\n                    <PlayCircle className=\"w-5 h-5 text-gray-500\" />\n                  )}\n                  <div>\n                    <p className=\"font-medium text-gray-800\">Lesson {index + 1}: {lesson.title}</p>\n                    <p className=\"text-sm text-gray-500\">{lesson.duration}</p>\n                  </div>\n                </div>\n                {!lesson.completed && (\n                  <Button variant=\"outline\" size=\"sm\" className=\"bg-green-500 text-white hover:bg-green-600\">\n                    Start Lesson\n                  </Button>\n                )}\n                {lesson.completed && (\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-green-600 pointer-events-none\">\n                    Completed\n                  </Button>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-8 flex justify-end\">\n            <Button className=\"bg-yellow-500 hover:bg-yellow-600 text-white text-lg px-8 py-6\">\n              Continue Course\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CourseDetails;\n"
  },
  {
    "type": "page",
    "fileName": "Profile.tsx",
    "dir": "src/pages",
    "value": "import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\n\nconst Profile: React.FC = () => {\n  const [userName, setUserName] = useState('John P. Doe');\n  const [userEmail, setUserEmail] = useState('john.doe@example.com');\n  const [userBio, setUserBio] = useState('Lifelong learner passionate about web development and data science.');\n  const [avatarUrl, setAvatarUrl] = useState('https://github.com/shadcn.png');\n\n  const handleSaveProfile = () => {\n    console.log('Saving Profile:', { userName, userEmail, userBio, avatarUrl });\n    // In a real application, you'd send this data to a backend API\n    alert('Profile updated successfully!');\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <h1 className=\"text-4xl font-inter font-bold text-gray-900\">My Profile</h1>\n      <p className=\"text-lg text-gray-600\">Manage your personal information and preferences.</p>\n\n      <Card className=\"p-6 shadow-md\">\n        <CardHeader className=\"px-0 pt-0\">\n          <CardTitle className=\"text-2xl font-inter\">Personal Information</CardTitle>\n          <CardDescription>Update your name, email, and bio.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"px-0 pb-0 space-y-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"w-20 h-20\">\n              <AvatarImage src={avatarUrl} alt=\"@johndoe\" />\n              <AvatarFallback>JD</AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"text-xl font-semibold text-gray-800\">{userName}</h3>\n              <p className=\"text-gray-600\">{userEmail}</p>\n              <Button variant=\"link\" className=\"p-0 h-auto text-green-600\">Change Avatar</Button>\n            </div>\n          </div>\n\n          <div className=\"grid w-full items-center gap-1.5\">\n            <Label htmlFor=\"name\">Full Name</Label>\n            <Input\n              id=\"name\"\n              type=\"text\"\n              value={userName}\n              onChange={(e) => setUserName(e.target.value)}\n            />\n          </div>\n\n          <div className=\"grid w-full items-center gap-1.5\">\n            <Label htmlFor=\"email\">Email Address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={userEmail}\n              onChange={(e) => setUserEmail(e.target.value)}\n            />\n          </div>\n\n          <div className=\"grid w-full items-center gap-1.5\">\n            <Label htmlFor=\"bio\">Bio</Label>\n            <Input\n              id=\"bio\"\n              type=\"text\"\n              value={userBio}\n              onChange={(e) => setUserBio(e.target.value)}\n            />\n          </div>\n\n          <Button onClick={handleSaveProfile} className=\"bg-green-600 hover:bg-green-700 text-white\">\n            Save Profile\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Separator />\n\n      <Card className=\"p-6 shadow-md\">\n        <CardHeader className=\"px-0 pt-0\">\n          <CardTitle className=\"text-2xl font-inter\">Account Settings</CardTitle>\n          <CardDescription>Manage your password and other account options.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"px-0 pb-0 space-y-4\">\n          <Button variant=\"outline\" className=\"w-full justify-start\">\n            Change Password\n          </Button>\n          <Button variant=\"outline\" className=\"w-full justify-start\">\n            Notification Preferences\n          </Button>\n          <Button variant=\"destructive\" className=\"w-full justify-start\">\n            Delete Account\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Profile;\n"
  }
]
